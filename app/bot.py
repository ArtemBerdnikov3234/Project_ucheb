import asyncio
import logging
from datetime import datetime

from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.utils.exceptions import BotBlocked, ChatNotFound, TerminatedByOtherGetUpdates

from app.config import BOT_TOKEN, PRICE_CHECK_INTERVAL
from app import database as db
from app.handlers.common import register_handlers_common
from app.handlers.actions import register_handlers_actions
from app.services.ozon_parser import OzonParser
from app.services.wildberries_parser import WildberriesParser


logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


class ParsersMiddleware(BaseMiddleware):
    def __init__(self, ozon_parser: OzonParser, wb_parser: WildberriesParser):
        super().__init__()
        self.ozon_parser = ozon_parser
        self.wb_parser = wb_parser

    async def on_process_message(self, message: types.Message, data: dict):
        data['ozon_parser'] = self.ozon_parser
        data['wb_parser'] = self.wb_parser

    async def on_process_callback_query(self, callback_query: types.CallbackQuery, data: dict):
        data['ozon_parser'] = self.ozon_parser
        data['wb_parser'] = self.wb_parser


async def check_prices_periodically(bot: Bot, parser: OzonParser):

    await asyncio.sleep(20)
    logging.info("–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω –∑–∞–ø—É—â–µ–Ω–∞.")
    
    while True:
        logging.info("–ù–∞—á–∏–Ω–∞—é –ø–ª–∞–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–Ω Ozon...")
        try:
            all_tracked_items = await db.get_all_tracking_from_db()
            
            if not all_tracked_items:
                logging.info("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {} —Å–µ–∫—É–Ω–¥.".format(PRICE_CHECK_INTERVAL))
            else:
                logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(all_tracked_items)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
                for user_id, product_id, name, desired_price, old_price in all_tracked_items:
                    logging.info(f"–ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–≤–∞—Ä {product_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
                    
                    product_data = await parser.get_product_data(product_id)
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å –±–∞–Ω
                    await asyncio.sleep(5) 
                    
                    if product_data and product_data.get('price'):
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É —Å –∫–∞—Ä—Ç–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–≥–æ–¥–Ω–µ–µ
                        new_price = product_data.get('price_with_card') or product_data.get('price')
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤ –ë–î
                        await db.update_tracking_in_db(user_id, product_id, int(new_price), datetime.now().isoformat())
                        
                        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∂–µ–ª–∞–µ–º–æ–π —Ü–µ–Ω–æ–π
                        if new_price <= desired_price:
                            logging.info(f"–¶–ï–ù–ê –°–ù–ò–ñ–ï–ù–ê! –¢–æ–≤–∞—Ä {product_id}, –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ {new_price} <= –∂–µ–ª–∞–µ–º–æ–π {desired_price}.")
                            text = (f"üéâ <b>–¶–µ–Ω–∞ —Å–Ω–∏–∂–µ–Ω–∞!</b>\n\n"
                                    f"<b>{name}</b>\n"
                                    f"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_price} ‚ÇΩ\n"
                                    f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{int(new_price)} ‚ÇΩ</b> (–≤–∞—à–∞ —Ü–µ–ª—å: {desired_price} ‚ÇΩ)\n\n"
                                    f"https://ozon.ru/product/{product_id}/")
                            try:
                                await bot.send_message(user_id, text)
                                # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                                await db.remove_tracking_from_db(user_id, product_id)
                                logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∏ —Ç–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
                            except (BotBlocked, ChatNotFound):
                                logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –£–¥–∞–ª—è–µ–º –≤—Å–µ –µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
                                await db.remove_tracking_from_db(user_id, product_id)
                        else:
                            logging.info(f"–¶–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä {product_id} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ ({new_price} > {desired_price}).")
                    else:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id} –ø—Ä–∏ –ø–ª–∞–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ.")

        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω: {e}")
        
        # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(PRICE_CHECK_INTERVAL)

# –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
async def on_startup(dp: Dispatcher):
    await db.initialize_db()
    
    ozon_parser = OzonParser()
    wb_parser = WildberriesParser()
    
    dp.middleware.setup(ParsersMiddleware(ozon_parser, wb_parser))
    dp['ozon_parser'] = ozon_parser
    
    asyncio.create_task(check_prices_periodically(dp.bot, ozon_parser))

async def on_shutdown(dp: Dispatcher):
    ozon_parser = dp.get('ozon_parser')
    if ozon_parser:
        ozon_parser.quit()
    logging.warning('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
    storage = MemoryStorage()
    dp = Dispatcher(bot, storage=storage)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    register_handlers_common(dp)
    register_handlers_actions(dp)

    try:
        executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)
    except TerminatedByOtherGetUpdates:
        logging.critical("–ó–ê–ü–£–©–ï–ù–ê –î–†–£–ì–ê–Ø –ö–û–ü–ò–Ø –ë–û–¢–ê! –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã python.exe –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logging.critical(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

if __name__ == '__main__':
    main()